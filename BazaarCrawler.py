import requests,time,pyzipper,os,argparse
from datetime import datetime, timedelta
import sys
import subprocess
import pymysql
from pyfiglet import Figlet
import time

from datetime import datetime, timedelta
import pprint
from influxdb import InfluxDBClient

apikey = 'bazaar_abuse_api_key'
malware_bazaar_file = 'malware_bazaar.csv'

parser = argparse.ArgumentParser(description="Download malware samples from https://bazaar.abuse.ch/")
parser.add_argument('-d','--download',action="store_true",help="Download a new copy of the CSV to work with")
parser.add_argument('-t','--threat',help="Download samples associated with the threat name you enter")
args = parser.parse_args()

def download_malware_bazaar():
    #csv로 bazaar 다운로드
    res = requests.get('https://bazaar.abuse.ch/export/csv/recent/')
    savefile = open(malware_bazaar_file, 'ab')
    for chunk in res.iter_content(100000):
        savefile.write(chunk)

def unzip_file(filename):
    #zip파일 비밀번호 infected
    with pyzipper.AESZipFile(filename) as zf:
        zf.pwd = b'infected'
        zf.extractall("./exploit/bazaar_abuse")

def analyze_data(threat):
    threatcount = 0
    matched_threats = []
    with open (malware_bazaar_file,'r', encoding='UTF8') as data:
        for item in data:
            try:
                item = item.strip()
            except:
                continue
            if "#" in item:
                pass
            else:
                # 멀웨어 파일 파싱
                item = item.replace("\"","")
                item = item.split(',')
                first_seen_utc = item[0]
                sha256 = item[1].strip()
                filename = item[5].strip()
                zip_filename = filename +'.zip'
                file_type_guess = item[6]
                mime_type = item[7]
                signature = item[8]
                clamav = item[9]
                vtpercent = item[10]
                _created = (time.strptime(first_seen_utc,'%Y-%m-%d %H:%M:%S'))
                created =(time.strftime("%Y-%m-%dT%H:%M:%S", _created))

                matched_threats.append("{},{},{},{}".format(created,sha256,zip_filename,file_type_guess))
           
        for item in matched_threats:
            created,sha256,zip_filename,file_format = item.split(',')

            cmd = "python3 vxapi.py report_get_summary " + sha256
            result = subprocess.getstatusoutput(cmd)

            #SQL QUERY
            try:
                # connection = pymysql.connect(host='localhost', user='USER', password='PASSWORD', db='DB', charset='utf8')
                # cursor = connection.cursor()
                # sql = "INSERT INTO exploit(sha256, info) VALUES ('" + sha256 + "', '"+ "{ \n \"file_format\" :" + "\"" + file_format.replace(" ", "") + "\"," + result[1][1:] + "');" 
                # cursor.execute(sql)
                # connection.commit()

                result_edit = result[1][1:].replace("\\n", "")
                threat_level = result_edit.find("verdict")
                threat_level_end = result_edit.find("\",", threat_level)
                
                #influxdb QUERY
                client=InfluxDBClient('localhost', 8086, 'telegraf', 'password', 'telegrafdb')
                json_body=[{"measurement" : "exploit", "time" : datetime.now() - timedelta(hours=-9), "fields": {"file_format" : file_format.replace(" ", ""), "sha256" : sha256, "verdict" : result_edit[threat_level + 11:threat_level_end], "result" : result_edit}}]
                client.create_database('telegrafdb')
                client.write_points(json_body)
                result_query = client.query('select * from exploit')
                pprint.pprint(json_body)
	    
                #print(result_edit)
                print('\033[32m' + 'Download Complete!'+'\033[37m')
            
                headers = { 'API-KEY': apikey }
                data = { 'query': 'get_file','sha256_hash':sha256, }
                response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=15, headers=headers, allow_redirects=True)
                open(zip_filename,'wb').write(response.content)
                # Unzip file
                unzip_file(zip_filename)
                os.remove(zip_filename)
            except:
                print("{} failed to unzip. Zip file saved".format(zip_filename))

f = Figlet(font='slant')
print(f.renderText('Malware Crawler'))
for i in range(3):
    time.sleep(1)
    print('\n')
malware_bazaar_data = download_malware_bazaar()
analyze_data(args.threat)
# connection.close()

sys.exit()
